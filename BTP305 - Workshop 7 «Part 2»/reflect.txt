

//name: Nahal Mousavi
//email: nmousavi4@myseneca.ca
//Student ID: 133828178
//date: nov,17, 2022
//I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.//
The workshop has CrimeStatistics module which containes a struct Crime. The struct stores the information about the crimes in a country. In the class,
a vector is used to store the collection of Crime objects. All the functions use STL algorithms instead of the manual loops to perform operations. 
The algorithms contain lambda expressions to process the collection of crimes.

All the functions of STL used in this workshop are mentioned below:
1. for_each
2. accumulate
3. sort
4. transform
5. any_of
6. copy_if

The description is given:

1. std::for_each(begin(collection), end(collection), [&ostr](auto theCrime) {ostr << theCrime << std::endl; });

 Used in display() to iterate over the collection from begin to end and print the crime objects using insertion (<<) operator. It uses lamda which prints 
the object and captures the instream object by reference. for_each is used because it could simply iterate over the entire collection and display the object. 

2. std::accumulate(collection.begin(), collection.end(), (int)0, [](int s, const Crime& theCrime)
Also used in display() to find the total cases and resolved cases and return them. With accumulate(), we can simply sum the specified attribute of the struct and 
return the sum, that is why it is used.


3. std::sort(begin(collection), end(collection), [](const Crime& crime1, const Crime& crime2)
 Used in sort() function to sort it in ascending order according to the specified attribute. There are four fields for sorting Province, Crime, Cases and Resolved)
so the algorithm is applied for all four. sort() algorithm iterates through the collection, and based on the field name given in parameter, sorts the collection in 
 the lambda and returns the sorted collection.

4.  std::transform(begin(collection), end(collection), begin(collection), [](Crime theCrime)
Used in cleanList() function to remove the "[None]" token from the crime. It is basically copying Crime objects into the same vector, 
transforming only those objects which have the specified token. transform is used instead of find or find_if because it will iterate over 
the whole collection and transform the objects that satisfy the lambda expression, whereas find and find_if returned only the first instance that satisfies
the predicate.

5.  std::any_of(begin(collection), end(collection), [=](const Crime& theCrime)
Used in inCollection() function, which accepts a crime name in the parameter and checks if any instance exists that has the specified crime.
any_of is used instead of all_of because even if a single instance has that crime, we need inCollection() to return true, which is what any_of does. 
It iterates over the collection and returns true.

6. std::copy_if(begin(collection), end(collection), std::back_inserter(temp), [=](const Crime& theCrime)
Used in getListForProvince() method to copy only those Crime objects into the list whose province matches the parameter.
copy_if is used instead of copy because we don't need to copy all the objects, only those objects which satisfy the condition.

The most important advantage of using STL algorithms instead of implementing the loop logic ourselves is the fast speed and that no debugging is required. 
Additionally, if manual loops are used, deciphering their functionality might take a lot of time, whereas with STL algorithms we can simply tell what is going on 
just by looking at the statement. Therefore, performing common operations on containers with STL algorithms is a lot simpler, easier and faster than using loops.

The sort() function is redesigned to catch any error by using exception. If the parameter is null or contains invalid string, then we simply generate an 
exception informing the client that they have specified an invalid field. This way, any and all errors can be detected by the compiler without it terminating 
the program abnormally.
